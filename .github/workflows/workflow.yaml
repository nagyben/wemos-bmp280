name: 'terraform ci'

on:
  push:
    branches:
      - master
    paths-ignore:
      - .devcontainer/**
      - weather-station-gcp/**
      - .gitignore
      - viz/**

concurrency: 'workflow'

jobs:
  receiver-unit-test:
    name: 'Receiver unit test'
    runs-on: ubuntu-latest

    services:
      firestore:
        image: mtlynch/firestore-emulator
        ports:
        - 8080:8080

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v2

    - name: 'install python'
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: 'install test dependencies'
      run: |
        pip install -U pip
        pip install poetry
        poetry lock
        poetry install
      env:
        POETRY_VIRTUALENVS_CREATE: false
      working-directory: cloud_functions/receiver

    - name: 'code quality'
      run: |
        set -euo pipefail
        black --check .
        isort --check .
        mypy --strict .
      working-directory: cloud_functions/receiver

    - name: 'pytest'
      run: |
        python -m pytest tests/
      working-directory: cloud_functions/receiver
      env:
        FIRESTORE_EMULATOR_HOST: localhost:8080
        FIRESTORE_PROJECT_ID: dummy-firestore-id

  viz-unit-test:
    name: 'Viz unit test'
    runs-on: ubuntu-latest

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v2

    - name: 'install python'
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: 'install test dependencies'
      run: |
        pip install -U pip
        pip install poetry
        poetry lock
        poetry install
      env:
        POETRY_VIRTUALENVS_CREATE: false
      working-directory: cloud_functions/viz

    - name: 'code quality'
      run: |
        set -euo pipefail
        black --check .
        isort --check .
        mypy --strict .
      working-directory: cloud_functions/viz

    - name: 'pytest'
      run: |
        python -m pytest tests/
      working-directory: cloud_functions/viz

  terraform-deploy-test:
    name: 'Deploy test infra'
    uses: nagyben/wemos-bmp280/.github/workflows/deploy.yaml@master
    needs: [receiver-unit-test, viz-unit-test]
    with:
      environment: test
      working_directory: infra/app-test
    secrets:
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}

  receiver-e2e:
    name: receiver-e2e
    runs-on: ubuntu-latest
    needs: terraform-deploy-test

    steps:
    - uses: actions/checkout@v2

    - name: 'install tf'
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    - name: Setup Terragrunt
      uses: autero1/action-terragrunt@v1.1.0
      with:
        terragrunt_version: latest

    - name: 'tf init'
      run: terragrunt init
      working-directory: infra/app-test
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: 'tf output'
      run: terragrunt output -json > tfoutput.json
      working-directory: infra/app-test
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: 'install python'
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: 'install test dependencies'
      run: |
        set -euo pipefail
        pip install -U pip
        pip install poetry
        poetry lock
        poetry install
      env:
        POETRY_VIRTUALENVS_CREATE: false
      working-directory: cloud_functions/receiver

    - run: echo $GOOGLE_CREDENTIALS > /tmp/creds.json
      name: write creds to file
      env:
        GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: Test with pytest
      run: |
        set -euo pipefail
        export RECEIVER_URL=$(jq -r .receiver_url.value ../infra/app-test/tfoutput.json)
        export TOPIC_NAME=$(jq -r .topic_name.value ../infra/app-test/tfoutput.json)
        pytest e2e/
      working-directory: cloud_functions/receiver
      env:
        GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/creds.json

  viz-e2e:
    name: viz-e2e
    runs-on: ubuntu-latest
    needs: terraform-deploy-test

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v2

    - name: 'install python'
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: 'install e2e dependencies'
      run: |
        pip install -U pip
        pip install -r requirements.txt
      env:
        POETRY_VIRTUALENVS_CREATE: false
      working-directory: cloud_functions/viz/e2e

    - name: 'install tf'
      uses: hashicorp/setup-terraform@v1

    - name: 'tg init'
      run: terraform init
      working-directory: infra/app-test
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: 'tg output'
      run: terraform-bin output -json > tfoutput.json
      working-directory: infra/app-test
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: 'pytest'
      run: |
        echo $GOOGLE_CREDENTIALS > /tmp/creds.json
        export URL=$(jq -r ".viz_url.value" ../terraform/tfoutput.json)
        python -m pytest e2e/
      working-directory: cloud_functions/viz
      env:
        GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/creds.json

  terraform-deploy-prod:
    name: 'Deploy prod infra'
    uses: nagyben/wemos-bmp280/.github/workflows/deploy.yaml@master
    needs: [receiver-e2e, viz-e2e]
    with:
      environment: prod
      working_directory: infra/app-prod
    secrets:
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
