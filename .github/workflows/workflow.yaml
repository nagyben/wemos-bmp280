name: 'terraform ci'

on:
  push:
    branches:
      - master
    paths-ignore:
      - .devcontainer/**
      - weather-station-gcp/**
      - .gitignore

concurrency: 'workflow'

jobs:
  test:
    name: 'Test'
    runs-on: ubuntu-latest

    services:
      firestore:
        image: mtlynch/firestore-emulator
        ports:
        - 8080:8080

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v2

    - name: 'install python'
      uses: actions/setup-python@v1
      with:
        python-version: '3.9'

    - name: 'install test dependencies'
      run: |
        pip install -U pip
        pip install poetry
        poetry lock
        poetry install
      env:
        POETRY_VIRTUALENVS_CREATE: false
      working-directory: cloud_functions

    - name: 'code quality'
      run: |
        set -euo pipefail
        black --check .
        isort --check .
      working-directory: cloud_functions

    - name: 'pytest'
      run: |
        python -m pytest tests/
      working-directory: cloud_functions
      env:
        FIRESTORE_EMULATOR_HOST: localhost:8080
        FIRESTORE_PROJECT_ID: dummy-firestore-id

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v2

    - name: 'install tf'
      uses: hashicorp/setup-terraform@v1

    - name: 'install python'
      uses: actions/setup-python@v1
      with:
        python-version: '3.9'

    - name: 'export requirements'
      run: |
        pip install -U pip
        pip install poetry
        poetry lock
        poetry export --without-hashes > requirements.txt
      env:
        POETRY_VIRTUALENVS_CREATE: false
      working-directory: cloud_functions

    - name: 'tf init'
      run: terraform init
      working-directory: terraform
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: 'tf plan'
      run: terraform plan -var="billing_alert_email=$BILLING_ALERT_EMAIL" -var="project=$GOOGLE_PROJECT"
      working-directory: terraform
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        BILLING_ALERT_EMAIL: ${{ secrets.BILLING_ALERT_EMAIL }}
        GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}

    - name: 'tf apply'
      run: |
        echo "$BILLING_ALERT_EMAIL $GOOGLE_PROJECT"
        terraform apply --auto-approve -var="billing_alert_email=$BILLING_ALERT_EMAIL" -var="project=$GOOGLE_PROJECT"
      working-directory: terraform
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        BILLING_ALERT_EMAIL: ${{ secrets.BILLING_ALERT_EMAIL }}
        GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}

  e2e:
    name: e2e
    runs-on: ubuntu-latest
    needs: terraform

    steps:
    - uses: actions/checkout@v2

    - name: 'install tf'
      uses: hashicorp/setup-terraform@v1

    - name: 'tf init'
      run: terraform init
      working-directory: terraform
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: 'tf output'
      run: terraform-bin output -json > tfoutput.json
      working-directory: terraform
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: 'install python'
      uses: actions/setup-python@v1
      with:
        python-version: '3.9'

    - name: 'install test dependencies'
      run: |
        pip install -U pip
        pip install poetry
        poetry lock
        poetry install
      env:
        POETRY_VIRTUALENVS_CREATE: false
      working-directory: cloud_functions

    - run: echo $GOOGLE_CREDENTIALS > /tmp/creds.json
      name: write creds to file
      env:
        GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: Test with pytest
      run: |
        cat ../terraform/tfoutput.json
        export RECEIVER_URL=$(jq -r ".receiver_url.value" ../terraform/tfoutput.json)
        pytest e2e/
      working-directory: cloud_functions
      env:
        GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/creds.json