name: 'terraform ci'

on:
  push:
    branches:
      - master
    paths-ignore:
      - .devcontainer/**
      - weather-station-gcp/**
      - .gitignore
      - viz/**

concurrency: 'workflow'

jobs:
  terraform-init:
    name: 'Bootstrap infra'
    uses: nagyben/wemos-bmp280/.github/workflows/deploy.yaml@master
    with:
      environment: init
      working_directory: infra/init
    secrets:
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}

  receiver-unit-test:
    name: 'Receiver unit test'
    runs-on: ubuntu-latest
    needs: [terraform-init]

    services:
      firestore:
        image: mtlynch/firestore-emulator
        ports:
          - 8080:8080

      gcs:
        image: europe-west2-docker.pkg.dev/nagyben/nagyben-cr/fake-gcs
        ports:
          - 8090:8090

        # see https://cloud.google.com/artifact-registry/docs/docker/authentication#json-key
        credentials:
          username: _json_key_base64
          password: ${{ secrets.DOCKER_REGISTRY_KEY_BASE64 }}

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v2

    - name: 'install python'
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: 'install test dependencies'
      run: |
        pip install -U pip
        pip install poetry
        poetry lock
        poetry install
      env:
        POETRY_VIRTUALENVS_CREATE: false
      working-directory: cloud_functions/receiver

    - name: 'code quality'
      run: |
        set -euo pipefail
        black --check .
        isort --check .
        mypy --strict .
      working-directory: cloud_functions/receiver

    - name: 'pytest'
      run: |
        python -m pytest tests/
      working-directory: cloud_functions/receiver
      env:
        FIRESTORE_EMULATOR_HOST: localhost:8080
        FIRESTORE_PROJECT_ID: dummy-firestore-id
        PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python

  viz-unit-test:
    name: 'Viz unit test'
    runs-on: ubuntu-latest
    needs: [terraform-init]

    services:
      firestore:
        image: mtlynch/firestore-emulator
        ports:
          - 8080:8080

      gcs:
        image: europe-west2-docker.pkg.dev/nagyben/nagyben-cr/fake-gcs
        ports:
          - 8090:8090

        # see https://cloud.google.com/artifact-registry/docs/docker/authentication#json-key
        credentials:
          username: _json_key_base64
          password: ${{ secrets.DOCKER_REGISTRY_KEY_BASE64 }}

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v2

    - name: 'install python'
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: 'install test dependencies'
      run: |
        pip install -U pip
        pip install poetry
        poetry lock
        poetry install
      env:
        POETRY_VIRTUALENVS_CREATE: false
      working-directory: cloud_functions/viz

    - name: 'code quality'
      run: |
        set -euo pipefail
        black --check .
        isort --check .
        mypy --strict .
      working-directory: cloud_functions/viz

    # - name: 'pytest'
    #   run: |
    #     python -m pytest tests/
    #   working-directory: cloud_functions/viz
    #   env:
    #     FIRESTORE_EMULATOR_HOST: localhost:8080
    #     FIRESTORE_PROJECT_ID: dummy-firestore-id
    #     STORAGE_EMULATOR_HOST: http://localhost:8090

    - name: curl fake gcs
      run: |
        curl http://localhost:8090/storage/v1/b

    - name: Dump docker logs on failure
      if: failure()
      uses: jwalton/gh-docker-logs@v1

  terraform-deploy-test:
    name: 'Deploy test infra'
    uses: nagyben/wemos-bmp280/.github/workflows/deploy.yaml@master
    needs: [receiver-unit-test, viz-unit-test]
    with:
      environment: test
      working_directory: infra/app-test
    secrets:
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}

  receiver-e2e:
    name: receiver-e2e
    runs-on: ubuntu-latest
    needs: terraform-deploy-test

    steps:
    - uses: actions/checkout@v2

    - name: 'install tf'
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    - name: Setup Terragrunt
      uses: autero1/action-terragrunt@v1.1.0
      with:
        terragrunt_version: latest

    - name: 'tf init'
      run: terragrunt init
      working-directory: infra/app-test
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: 'tf output'
      run: terragrunt output -json > ~/tfoutput.json
      working-directory: infra/app-test
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: 'install python'
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: 'install test dependencies'
      run: |
        set -euo pipefail
        pip install -U pip
        pip install poetry
        poetry lock
        poetry install
      env:
        POETRY_VIRTUALENVS_CREATE: false
      working-directory: cloud_functions/receiver

    - run: echo $GOOGLE_CREDENTIALS > ~/creds.json
      name: write creds to file
      env:
        GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: Test with pytest
      run: |
        set -euo pipefail
        export RECEIVER_URL=$(jq -r .receiver_url.value ~/tfoutput.json)
        export TOPIC_NAME=$(jq -r .topic_name.value ~/tfoutput.json)
        pytest e2e/
      working-directory: cloud_functions/receiver
      env:
        GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
        GOOGLE_APPLICATION_CREDENTIALS: ~/creds.json

  viz-e2e:
    name: viz-e2e
    runs-on: ubuntu-latest
    needs: terraform-deploy-test

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v2

    - name: 'install python'
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: 'install e2e dependencies'
      run: |
        pip install -U pip
        pip install -r requirements.txt
      env:
        POETRY_VIRTUALENVS_CREATE: false
      working-directory: cloud_functions/viz/e2e

    - name: 'install tf'
      uses: hashicorp/setup-terraform@v1

    - name: Setup Terragrunt
      uses: autero1/action-terragrunt@v1.1.0
      with:
        terragrunt_version: latest

    - name: 'tg init'
      run: terragrunt init
      working-directory: infra/app-test
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: 'tg output'
      run: |
        terragrunt output -json > ~/tfoutput.json
        cat ~/tfoutput.json
      working-directory: infra/app-test
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: 'pytest'
      run: |
        echo $GOOGLE_CREDENTIALS > ~/creds.json
        jq -r ".viz_url.value" ~/tfoutput.json
        export URL=$(jq -r ".viz_url.value" ~/tfoutput.json)
        python -m pytest e2e/
      working-directory: cloud_functions/viz
      env:
        GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        GOOGLE_APPLICATION_CREDENTIALS: ~/creds.json

  terraform-deploy-prod:
    name: 'Deploy prod infra'
    uses: nagyben/wemos-bmp280/.github/workflows/deploy.yaml@master
    needs: [receiver-e2e, viz-e2e]
    with:
      environment: prod
      working_directory: infra/app-prod
    secrets:
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
